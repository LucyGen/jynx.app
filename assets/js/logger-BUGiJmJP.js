const e={globalLogLevel:2,enableConsoleLogs:!0,moduleLogLevels:{animation:2,background:2,i18n:3,app:1,forms:1,ui:2,performance:1},timestampFormat:!0,showModuleName:!0},o=new class{constructor(){this.config={...e},this.originalConsoleMethods={log:console.log,info:console.info,warn:console.warn,error:console.error,debug:console.debug,trace:console.trace}}init(o={}){return this.config={...e,...o,moduleLogLevels:{...e.moduleLogLevels,...o.moduleLogLevels||{}}},this.checkUrlParameters(),this}checkUrlParameters(){try{const e=new URLSearchParams(window.location.search).get("log");if(e)if(e.includes(":")){const[o,s]=e.split(":"),t=this.getLogLevelFromString(s);void 0!==t&&(this.config.moduleLogLevels[o]=t,this.info("logger",`Set log level for module '${o}' to ${s.toUpperCase()}`))}else{const o=this.getLogLevelFromString(e);void 0!==o&&(this.config.globalLogLevel=o,this.info("logger",`Set global log level to ${e.toUpperCase()}`))}}catch(e){this.originalConsoleMethods.error("Error parsing log URL parameters:",e)}}getLogLevelFromString(e){return{trace:0,debug:1,info:2,warn:3,error:4,none:5}[e.toLowerCase()]}getEffectiveLogLevel(e){return e&&void 0!==this.config.moduleLogLevels[e]?this.config.moduleLogLevels[e]:this.config.globalLogLevel}formatLogMessage(e,o){const s=[...o];let t="";return this.config.timestampFormat&&(t+=`[${(new Date).toISOString()}] `),this.config.showModuleName&&e&&(t+=`[${e}] `),t&&("string"==typeof s[0]?s[0]=t+s[0]:s.unshift(t)),s}isLevelEnabled(e,o){return o>=this.getEffectiveLogLevel(e)&&this.config.enableConsoleLogs}trace(e,...o){this.isLevelEnabled(e,0)&&this.originalConsoleMethods.trace(...this.formatLogMessage(e,o))}debug(e,...o){this.isLevelEnabled(e,1)&&this.originalConsoleMethods.debug(...this.formatLogMessage(e,o))}info(e,...o){this.isLevelEnabled(e,2)&&this.originalConsoleMethods.info(...this.formatLogMessage(e,o))}warn(e,...o){this.isLevelEnabled(e,3)&&this.originalConsoleMethods.warn(...this.formatLogMessage(e,o))}error(e,...o){this.isLevelEnabled(e,4)&&this.originalConsoleMethods.error(...this.formatLogMessage(e,o))}getModuleLogger(e){return{trace:(...o)=>this.trace(e,...o),debug:(...o)=>this.debug(e,...o),info:(...o)=>this.info(e,...o),warn:(...o)=>this.warn(e,...o),error:(...o)=>this.error(e,...o),group:(o,s=!1)=>{this.isLevelEnabled(e,1)},groupEnd:()=>{this.isLevelEnabled(e,1)},time:o=>{this.isLevelEnabled(e,1)},timeEnd:o=>{this.isLevelEnabled(e,1)},dir:(o,s={})=>{this.isLevelEnabled(e,1)},get isTraceEnabled(){return this.isLevelEnabled(e,0)},get isDebugEnabled(){return this.isLevelEnabled(e,1)},get isInfoEnabled(){return this.isLevelEnabled(e,2)},get isWarnEnabled(){return this.isLevelEnabled(e,3)},get isErrorEnabled(){return this.isLevelEnabled(e,4)}}}setModuleLogLevel(e,o){this.config.moduleLogLevels[e]=o}setGlobalLogLevel(e){this.config.globalLogLevel=e}enableLogs(e){this.config.enableConsoleLogs=e}};o.init();export{o as l};
